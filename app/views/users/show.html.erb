<h1>User Dashboard for <%= @user.name %></h1>
<hr>

<p>
    We just created an MX user with the API. The next step is to connect them to an institution so the user can view their accounts.
</p>

<section>
    <h2>Step 2 Connect an Institution</h2>

    <p>
        MX provides developers with the Connect Widget to simplify the process of connecting to various institutions.  In order to show the widget there are a few steps to follow.
    </p>

    <ol>
        <li>Get a widget url from the API</li>
        <li>Use the widget url in the Widget Loader to render it on the page</li>
    </ol>

    <%= render "/http_example", description: "To generate a widget URL, you send an http message to:", method: "POST", url: "/users/{user_guid}/widget_urls" %>

    <p>(optional) If you want to see what a URL looks like, click the button to call the endpoint above.</p>
    <button id="gen-url">Generate a URL</button>

    <p>Clicking the button below will both generate the url, and use it with the Widget Loader.  Go ahead and open the Connect Widget by clicking the button</p>

    <button id="open-aggregation">Open Connect Widget</button>
</section>

<section>
    <h2>Step 3 Verify Member Accounts</h2>

    <p>In order to share account information with an external partner an account must be verified first.  This action can also be done using the Connect Widget using "verification" mode</p>

    <button id="open-verification">Open Connect Widget (Verification)</button>
</section>

<div id="connect-widget-dialog" class="connect-widget-full" hidden>
    <div id="aggregation-instructions">
        <h2>Connect Widget (Aggregation Mode)</h2>
        <div>Click "Continue"</div>
        <div>Search for "MX Bank"</div>
        <div>user: mxuser</div>
        <div>password: password</div>
        <br>
    </div>
    <div id="verification-instructions">
        <h2>Connect Widget (Verification Mode)</h2>
        <div>Click "Continue"</div>
        <div>Select "MX Bank"</div>
        <div>Once verification is done, close the widget</div>
        <br>
    </div>
    <button id="widget-close">Close Widget</button>
    <div id="connect-widget"></div>
</div>


<%= link_to "Return To User List", users_path %>
<%= link_to "Return To Beginning", root_path %>
<%= link_to "Go To Accounts", "/mx/accounts/#{@user.guid}" %>

<script>
    /** 
      * @param callbackForUrl: (url) => {}
      */
    function getWidgetURL(callbackForUrl) {
        fetch("/mx/aggregation/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            let widgetURL = null
            try {
                widgetURL = JSON.parse(widgetResponse).url
            } catch (error) {
                console.log("Error getting widget URL to load")
                return
            }

            callbackForUrl(widgetURL)
        })
    }

    function showDialog(type) {
        document.getElementById("connect-widget-dialog").hidden = false

        // Show and Hide instructions
        document.getElementById('verification-instructions').hidden = true
        document.getElementById('aggregation-instructions').hidden = true

        if (type == "aggregation") {
            document.getElementById('aggregation-instructions').hidden = false
        }

        if (type == "verification") {
            document.getElementById('verification-instructions').hidden = false
        }
    }

    function dismissDialog() {
        document.getElementById("connect-widget-dialog").hidden = true
        var connectIFrame = document.querySelector('iframe[title="Connect"]')
        connectIFrame.remove()
    }

    document.getElementById('gen-url').addEventListener('click', () =>
        getWidgetURL((url) => alert(url))
    )

     document.getElementById('widget-close').addEventListener('click', () => {
         dismissDialog()
     })

    // This sets up the MX Widget Loader
    var mxConnect = new window.MXConnect({
        id: "connect-widget",
        iframeTitle: "Connect",
        /**
        * Callback that for handling all events within Connect.
        * Only called in  ui_message_version 4 or higher.
        *
        * The events called here are the same events that come through post
        * messages.
        */
        onEvent: function (type, payload) {
            console.log("onEvent", type, payload);

            if (type === "mx/connect/connected/primaryAction") {
                console.log("...close Connect after clicking continue")

                // custom code for your app to close the widget
                dismissDialog()
            }
        },
        config: {
            ui_message_version: 4
        },
        targetOrigin: "*",
    })

    document.getElementById('open-aggregation').addEventListener('click', () => {
        console.log("Agg Widget clicked")

        // This endpoint will get a fresh widget url for aggregation
        fetch("/mx/aggregation/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            let widgetURL = null
            try {
                widgetURL = JSON.parse(widgetResponse).url
            } catch (error) {
                console.log("Error getting widget URL to load")
                return
            }

            mxConnect.load(widgetURL)

            // Custom code to unhide the div containing the widget
            showDialog("aggregation")
        })
    })

    document.getElementById('open-verification').addEventListener('click', () => {
        console.log("Verification Widget clicked")

        // This endpoint will get a fresh widget url for verification
        fetch("/mx/verification/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            let widgetURL = null
            try {
                widgetURL = JSON.parse(widgetResponse).url
            } catch (error) {
                console.log("Error getting widget URL to load")
                return
            }

            mxConnect.load(widgetURL)
            showDialog("verification")
        })
    })
</script>