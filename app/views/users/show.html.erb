<%= link_to "Welcome", root_path %> /
<%= link_to "Users", users_path %> /
<%= @user.name %>

<h1>Client Demo for <%= @user.name %></h1>
<hr>

<p>
    An MX user was just created with the API, or a pre-existing one was selected.
    The next step to generate an authorization code is to connect them to an 
    institution so the user can view and verify their accounts.
</p>

<section>
    <h2>Step 2 Connect to an Institution</h2>

    <div class="sub-section">
        <p>
            MX provides developers with MXconnect, an embeddable widget, to simplify the process of connecting to various institutions. In order to launch it there are a few steps to follow.
        </p>

        <ol>
            <li>Get a URL from the MX API</li>
            <li>Use the returned URL with the Widget Loader to show it on the page</li>
        </ol>

        <%= render "/http_example",
            action_id: "gen-url",
            action_text: "Generate MXconnect URL",
            title: "Get an MXconnect URL",
            description: "This endpoint returns a widget URL. With an MXconnect URL you will be able to render MXconnect directly in your app. Click the button to see what a URL looks like.",
            method: "POST",
            url: "/users/{user_guid}/widget_urls",
            href: "https://docs.mx.com/api#connect_request_a_url"
        %>

        <div class="http-result-section result_paragraph hidden">
            <p class="no-padding-margin" id="widget-url"></p>
        </div>

        <p>Click the button below to generate a URL and also launch MXconnect.  Once it has launched, if you'd like to use our test bank, follow the provided instructions above the MXconnect widget.</p>

        <button id="open-aggregation">Open MXconnect</button>
    </div>

    <div class="sub-section">
        <%= render "/http_example",
            action_id: "load-accounts",
            action_text: "Load User Accounts",
            title: "List All User Accounts",
            description: "This endpoint lists of all the accounts associated with the specified user.",
            method: "GET",
            url: "/users/{user_guid}/accounts",
            href: "https://docs.mx.com/api#core_resources_accounts_list_accounts"
        %>

        <div class="http-result-section hidden" id="user-accounts"></div>
    </div>
</section>

<section>
    <h2>Step 3 Verify Member Accounts</h2>

    <p>
        In order to share an account's number and routing number with a Processing Partner an account must be verified first. 
        This action can be done with MXconnect by using its "verification" mode.
    </p>

    <p>
        Click the button below to generate a new URL and launch MXconnect in verification mode.
        You can verify accounts for institutions that have already been connected 
        or search and connect to a new institution and verify one of its accounts.
    </p>

    <button id="open-verification">Open MXconnect (Verification)</button>

    <p>
        For additional details about account verification and what types of accounts can be verified,
        <a href="https://docs.mx.com/verification/guides/introduction#verification_overview" target="_blank">visit the docs to learn more.</a>
    </p>

</section>

<section>
    <h2>Step 4 Display Accounts</h2>

    <p>Here's a review up to this point</p>
    <ol>
        <li>A user has been created</li>
        <li>This user has connected to an institution, which created a Member resource</li>
        <li>Using MXconnect, an account has been verified</li>
    </ol>

    <p>
        Now the app needs to display a list of verified accounts, 
        so the user can generate an authorization code for one or more of them.
    </p>

    <%= render "/http_example",
      action_id: "load-verified-accounts",
      action_text: "Load Verified Accounts",
      title: "List Verified Accounts",
      description: "This endpoint returns a list of accounts that have been verified for the specified user and member.", 
      method: "GET", 
      url: "/users/{user_guid}/members/{member_guid}/account_numbers",
      href: "https://docs.mx.com/api#verification_mx_widgets_list_account_numbers_by_member"
    %>

    <div class="http-result-section hidden" id="verified-accounts"></div>

    <p>Once the list loads up, you can click the "Generate Auth Code" button to request a code for that account</p>

    <div class="sub-section">
        <%= render "/http_example",
            title: "Generate an Authorization Code",
            description: "This endpoint will generate an authorization code for one specific account.  This is the endpoint called by the Generate Auth Code button in the above table",
            method: "POST",
            url: "/payment_processor_authorization_code"
        %>
    </div>

</section>

<section>
    <h2>What's Next?</h2>

    <p>At this point, your client application has an authorization code which you can share with one of our Processing Partners! You will need to share it directly with them, and then they'll be able to request the account information securely from MX.</p>
</section>

<div id="connect-widget-dialog" class="connect-widget-full" hidden>
    <div class="instructions">
        <div id="aggregation-instructions">
            <h2>MXconnect (Aggregation Mode)</h2>
            <div>
                <ol>
                    <li>Click "Continue"</li>
                    <li>Search for and select "MX Bank"</li>
                    <li>user: mxuser</li>
                    <li>password: password</li>
                </ol>
            </div>
        </div>

        <div id="verification-instructions">
            <h2>MXconnect (Verification Mode)</h2>

            <p>If you followed step 2 and connected to our test bank...</p>
            <div>
                <ol>
                    <li>Click "Continue"</li>
                    <li>Select "MX Bank"</li>
                    <li>If prompted, select the account you'd like to verify</li>
                </ol>
            </div>
        </div>
        <button id="widget-close">Close MXconnect</button>
    </div>
    <div id="connect-widget"></div>
</div>

<script>
    /**
     * Use to reveal an DOM element
     */
    function showElement(element) {
        element.classList.remove('hidden')
    }

    /**
    *  @returns ApiResponse {status: string, response: any} | null
    *  On error status this returns nil and should be handled
    */
    function handleApiResponse(response, messagePrefix = "Error") {
        try {
            apiResponse = JSON.parse(response)

            if (apiResponse.status == "error") {
                throw apiResponse.response
            }

            return apiResponse
        } catch (error) {
            alert(`${messagePrefix}: ${error}`)
        }
    }

    /** 
    *  This asks rails to call MX in order to obtain an MXconnect URL
    *  @param callbackForUrl: (url) => {}: do something with the URL
    */
    function getWidgetURL(callbackForUrl) {
        fetch("/mx/aggregation/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            const widgetURL = handleApiResponse(widgetResponse, "Error getting an MXconnect URL from MX")

            if (widgetURL) {
                callbackForUrl(widgetURL.response.url)
            }
        })
    }

    /**
    *  Used to show the custom MXconnect dialog
    *  It also helps to show or hide the correct set of instructions depending on mode
    */
    function showDialog(type) {
        document.getElementById("connect-widget-dialog").hidden = false
        const verificationInstructions = document.getElementById('verification-instructions')
        const aggregationInstructions = document.getElementById('aggregation-instructions')

        // Show and Hide instructions
        verificationInstructions.hidden = true
        aggregationInstructions.hidden = true

        if (type == "aggregation") {
            aggregationInstructions.hidden = false
        }

        if (type == "verification") {
            verificationInstructions.hidden = false
        }
    }

    /**
    *  This is used to dismiss the app's custom dialog which show MXconnect
    *  by hiding the dialog, and completely removing the iframe
    */
    function dismissDialog() {
        document.getElementById("connect-widget-dialog").hidden = true
        var connectIFrame = document.querySelector('iframe[title="Connect"]')
        connectIFrame.remove()
    }

    /**
    *  Wire up the button to generate a URL
    */
    document.getElementById('gen-url').addEventListener('click', () =>
        getWidgetURL((url) => {
            const urlParagraph = document.getElementById('widget-url')
            urlParagraph.innerText = url
            showElement(urlParagraph.parentElement)
        })
    )

    /**
    *  Wire up the button that closes the connect dialog
    */
     document.getElementById('widget-close').addEventListener('click', () => {
         dismissDialog()
     })

    /**
    *  Set up the Widget Loader so we can load MXconnect easily
    *  For more information see the example docs here: https://docs.mx.com/connect/guides/web
    */
    var mxConnect = new window.MXConnect({
        id: "connect-widget",
        iframeTitle: "Connect",
        /**
        * Callback that for handling all events within MXconnect.
        * Only called in  ui_message_version 4 or higher.
        *
        * The events called here are the same events that come through post
        * messages.
        */
        onEvent: function (type, payload) {
            console.log("onEvent", type, payload);

            if (type === "mx/connect/connected/primaryAction") {
                // custom code for your app to close the widget
                dismissDialog()
            }
        },
        config: {
            ui_message_version: 4
        },
        targetOrigin: "*",
    })

    /**
    *  Wire up the button which opens MXconnect in "aggregation" mode
    *  This calls the rails back-end to make the call directly to the MX API
    */
    document.getElementById('open-aggregation').addEventListener('click', () => {
        // This endpoint will get a fresh widget URL for aggregation
        fetch("/mx/aggregation/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            const widgetURL = handleApiResponse(widgetResponse, "Error getting an MXconnect URL (aggregation mode) from MX")

            if ( widgetURL ) {
                mxConnect.load(widgetURL.response.url)
                showDialog("aggregation")
            }
        })
    })

    /**
    *  Wire up the button that opens MXconnect in "verification" mode
    *  This calls the rails back-end to make the call directly to the MX API
    */
    document.getElementById('open-verification').addEventListener('click', () => {
        // This endpoint will get a fresh widget URL for verification
        fetch("/mx/verification/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            const widgetURL = handleApiResponse(widgetResponse, "Error getting an MXconnect URL (verification mode) from MX")

            if ( widgetURL ) {
                mxConnect.load(widgetURL.response.url)
                showDialog("verification")
            }
        })
    })

    /**
    *  After loading the HTML with verified Accounts and buttons...
    *  This wires up the buttons to call the rails back-end
    *  to ask MX for an authorization code, for that specific account
    */
    function setUpAccountButtons() {
        document.querySelectorAll("button[data-account-guid]").forEach(element => {
            element.addEventListener("click", () => {
                const accountGUID = element.getAttribute("data-account-guid")
                const memberGUID = element.getAttribute("data-member-guid")
                const userGUID = element.getAttribute("data-user-guid")

                // Ask Rails to fetch an auth code for the account
                fetch(`/mx/accounts/generate-auth-code/${accountGUID}/${memberGUID}/${userGUID}`)
                .then(resp => resp.text())
                .then(resp => {
                    codeResponse = handleApiResponse(resp, "Error getting authorization code from MX")

                    if (codeResponse) {
                        document.querySelector(`td[data-account-guid='${accountGUID}'`)
                            .innerText = codeResponse.response.payment_processor_authorization_code.authorization_code
                    }
                })
            })
        })
    }

    /**
    *  Wire up the button that loads up all the accounts connected to a User
    *  This calls rails, to directly ask MX API for the information
    */
    document.getElementById('load-accounts').addEventListener('click', () => {
        fetch("/mx/accounts/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(accountsResponse => {
            const htmlResponse = handleApiResponse(accountsResponse, "Error fetching user accounts")

            if (htmlResponse) {
                const userResultsElement = document.getElementById("user-accounts")
                userResultsElement.innerHTML = htmlResponse.response.html
                showElement(userResultsElement)
            }
        })
    })

    /**
    *  Wire up the button that loads up a list of verified accounts
    *  This calls rails, which uses a mixture of API endpoints to gather the accounts
    */
    document.getElementById('load-verified-accounts').addEventListener('click', () => {
        fetch("/mx/verified_accounts/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(accountsResponse => {
            const htmlResponse = handleApiResponse(accountsResponse, "Error fetching user accounts")

            if (htmlResponse) {
                const verifiedAccountsElement = document.getElementById("verified-accounts")
                verifiedAccountsElement.innerHTML = htmlResponse.response.html
                setUpAccountButtons()
                showElement(verifiedAccountsElement)
            }
        })
    })
</script>
