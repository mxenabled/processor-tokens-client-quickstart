<%= link_to "Welcome", root_path %> /
<%= link_to "Users", users_path %> /
<%= @user.name %>

<h1>User Dashboard for <%= @user.name %></h1>
<hr>

<p>
    We just created an MX user with the API. The next step is to connect them to an institution so the user can view their accounts.
</p>

<section>
    <h2>Step 2 Connect an Institution</h2>

    <p>
        MX provides developers with the Connect Widget to simplify the process of connecting to various institutions.  In order to show the widget there are a few steps to follow.
    </p>

    <ol>
        <li>Get a widget url from the API</li>
        <li>Use the widget url in the Widget Loader to render it on the page</li>
    </ol>

    <%= render "/http_example", 
      description: "To generate a widget URL send an http message to:", 
      method: "POST", 
      url: "/users/{user_guid}/widget_urls",
      href: "https://docs.mx.com/api#connect_request_a_url"
    %>

    <p>Clicking the button below will both generate the url and use it with the Widget Loader.  Go ahead and open the Connect Widget by clicking the button</p>

    <button id="open-aggregation">Open Connect Widget</button><br><br>

    <p>(optional) If you want to see what a URL looks like, click the button to call the endpoint above.</p>

    <button id="gen-url">Generate a URL</button><br><br><br>

    <%= render "/http_example",
      description: "To list a user's accounts send an http message to:", 
      method: "GET", 
      url: "/users/{user_guid}/accounts",
      href: "https://docs.mx.com/api#core_resources_accounts_list_accounts"
    %>

    <p>Click the button below to see what accounts have been connected to MX</p>
    
    <button id="load-accounts">Load User Accounts</button>

    <div id="user-accounts"></div>
</section>

<section>
    <h2>Step 3 Verify Member Accounts</h2>

    <p>In order to share account information with a Processing Partner an account must be verified first.  This action can also be done using the Connect Widget using "verification" mode</p>

    <p>Clicking the button below will generate a widget url, and render it using the Widget Loader.  The difference from this widget url request and the previous one, is this one requests "verification" mode instead of "aggregation"</p>

    <button id="open-verification">Open Connect Widget (Verification)</button>
</section>

<section>
    <h2>Step 4 Display Accounts</h2>

    <p>Here's a review up to this point</p>
    <ol>
        <li>A user has been created</li>
        <li>The user has connected to an institution, which creates a Member resource</li>
        <li>The Member has been verified</li>
    </ol>

    <p>Now the app needs display a list of verified accounts, so the user can generate an authorization code</p>

    <%= render "/http_example",
      description: "To list account numbers that have been verified, send an http message to:", 
      method: "GET", 
      url: "/users/{user_guid}/members/{member_guid}/account_numbers",
      href: "https://docs.mx.com/api#verification_mx_widgets_list_account_numbers_by_member"
    %>

    <button id="load-verified-accounts">Load Verified Accounts</button><br><br>

    <p>Once the list loads up, you can click the "Generate Auth Code" button to request a code for that account</p>

    <%= render "/http_example",
      description: "To get an account authorization code, send an http message to:", 
      method: "POST", 
      url: "/payment_processor_authorization_code"
    %>

    <div id="verified-accounts"></div>
</section>

<section>
    <h2>What's Next?</h2>

    <p>At this point, you hava an authorization code which you can share with one of our Processing Partners! You will need to share it directly with them, and then they'll be able to request the account information.</p>
</section>

<div id="connect-widget-dialog" class="connect-widget-full" hidden>
    <div id="aggregation-instructions">
        <h2>Connect Widget (Aggregation Mode)</h2>
        <div>Click "Continue"</div>
        <div>Search for "MX Bank"</div>
        <div>user: mxuser</div>
        <div>password: password</div>
        <br>
    </div>
    <div id="verification-instructions">
        <h2>Connect Widget (Verification Mode)</h2>
        <div>Click "Continue"</div>
        <div>Select "MX Bank"</div>
        <div>Once verification is done, close the widget</div>
        <br>
    </div>
    <button id="widget-close">Close Widget</button>
    <div id="connect-widget"></div>
</div>

<script>
    /**
    *  @returns ApiResponse {status: string, response: any} | null
    *  On error status this returns nil and should be handled
    */
    function handleApiResponse(response, messagePrefix = "Error") {
        try {
            apiResponse = JSON.parse(response)

            if (apiResponse.status == "error") {
                throw apiResponse.response
            }

            return apiResponse
        } catch (error) {
            alert(`${messagePrefix}: ${error}`)
        }
    }

    /** 
    *  This asks rails to call MX in order to obtain a Connect Widget url
    *  @param callbackForUrl: (url) => {}: do something with the url
    */
    function getWidgetURL(callbackForUrl) {
        fetch("/mx/aggregation/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            const widgetURL = handleApiResponse(widgetResponse, "Error getting connect URL from MX")

            if (widgetURL) {
                callbackForUrl(widgetURL.response.url)
            }
        })
    }

    /**
    *  Used to show the Connect dialog
    *  It also helps to show or hide the correct set of instructions depending on mode
    */
    function showDialog(type) {
        document.getElementById("connect-widget-dialog").hidden = false
        const verificationInstructions = document.getElementById('verification-instructions')
        const aggregationInstructions = document.getElementById('aggregation-instructions')

        // Show and Hide instructions
        verificationInstructions.hidden = true
        aggregationInstructions.hidden = true

        if (type == "aggregation") {
            aggregationInstructions.hidden = false
        }

        if (type == "verification") {
            verificationInstructions.hidden = false
        }
    }

    /**
    *  This is used to completely dismiss the app's Connect Dialog
    *  by hiding the dialog, and completely removing the iframe
    */
    function dismissDialog() {
        document.getElementById("connect-widget-dialog").hidden = true
        var connectIFrame = document.querySelector('iframe[title="Connect"]')
        connectIFrame.remove()
    }

    /**
    *  Wire up the button to generate a url
    */
    document.getElementById('gen-url').addEventListener('click', () =>
        getWidgetURL((url) => alert(url))
    )

    /**
    *  Wire up the button that closes the connect dialog
    */
     document.getElementById('widget-close').addEventListener('click', () => {
         dismissDialog()
     })

    /**
    *  Set up the Widget Loader so we can load the Connect Widget easily
    *  For more information see the example docs here: https://docs.mx.com/connect/guides/web
    */
    var mxConnect = new window.MXConnect({
        id: "connect-widget",
        iframeTitle: "Connect",
        /**
        * Callback that for handling all events within Connect.
        * Only called in  ui_message_version 4 or higher.
        *
        * The events called here are the same events that come through post
        * messages.
        */
        onEvent: function (type, payload) {
            console.log("onEvent", type, payload);

            if (type === "mx/connect/connected/primaryAction") {
                // custom code for your app to close the widget
                dismissDialog()
            }
        },
        config: {
            ui_message_version: 4
        },
        targetOrigin: "*",
    })

    /**
    *  Wire up the button which opens the Connect Widget in "aggregation" mode
    *  This calls the rails back-end to make the call directly to the MX API
    */
    document.getElementById('open-aggregation').addEventListener('click', () => {
        // This endpoint will get a fresh widget url for aggregation
        fetch("/mx/aggregation/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            const widgetURL = handleApiResponse(widgetResponse, "Error getting connect URL from MX")

            if ( widgetURL ) {
                mxConnect.load(widgetURL.response.url)
                showDialog("aggregation")
            }
        })
    })

    /**
    *  Wire up the button that opens the Connect Widget in "verification" mode
    *  This calls the rails back-end to make the call directly to the MX API
    */
    document.getElementById('open-verification').addEventListener('click', () => {
        // This endpoint will get a fresh widget url for verification
        fetch("/mx/verification/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(widgetResponse => {
            const widgetURL = handleApiResponse(widgetResponse, "Error getting a connect URL (verification mode) from MX")

            if ( widgetURL ) {
                mxConnect.load(widgetURL.response.url)
                showDialog("verification")
            }
        })
    })

    /**
    *  After loading the HTML with verified Accounts and buttons...
    *  This wires up the buttons to call the rails back-end
    *  to ask MX for an authorization code, for that specific account
    */
    function setUpAccountButtons() {
        document.querySelectorAll("button[data-account-guid]").forEach(element => {
            element.addEventListener("click", () => {
                const accountGUID = element.getAttribute("data-account-guid")
                const memberGUID = element.getAttribute("data-member-guid")
                const userGUID = element.getAttribute("data-user-guid")

                // Ask Rails to fetch an auth code for the account
                fetch(`/mx/accounts/generate-auth-code/${accountGUID}/${memberGUID}/${userGUID}`)
                .then(resp => resp.text())
                .then(resp => {
                    codeResponse = handleApiResponse(resp, "Error getting authorization code from MX")

                    if (codeResponse) {
                        document.querySelector(`td[data-account-guid='${accountGUID}'`)
                            .innerText = codeResponse.response.payment_processor_authorization_code.authorization_code
                    }
                })
            })
        })
    }

    /**
    *  Wire up the button that loads up all the accounts connected to a User
    *  This calls rails, to directly ask MX API for the information
    */
    document.getElementById('load-accounts').addEventListener('click', () => {
        fetch("/mx/accounts/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(accountsResponse => {
            const htmlResponse = handleApiResponse(accountsResponse, "Error fetching user accounts")

            if (htmlResponse) {
                document.getElementById("user-accounts").innerHTML = htmlResponse.response.html
            }
        })
    })

    /**
    *  Wire up the button that loads up a list of verified accounts
    *  This calls rails, which uses a mixture of API endpoints to gather the accounts
    */
    document.getElementById('load-verified-accounts').addEventListener('click', () => {
        fetch("/mx/verified_accounts/<%= @user.guid %>")
        .then(resp => resp.text())
        .then(accountsResponse => {
            const htmlResponse = handleApiResponse(accountsResponse, "Error fetching user accounts")

            if (htmlResponse) {
                document.getElementById("verified-accounts").innerHTML = htmlResponse.response.html
                setUpAccountButtons()
            }
        })
    })
</script>